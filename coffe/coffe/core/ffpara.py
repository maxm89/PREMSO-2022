# -*- coding: utf-8 -*-
"""Classes for generating force field parameters and their topologies."""

from __future__ import absolute_import, division, print_function

from coffe.core import filesys, placeholder, coffedir


class FFParameterError(Exception):
    pass


class FFParameters(object):
    """
    A class that defines a set of force field parameters.
    You should set up a ParameterFactory in order to produce instances of this class.
    After the topology has been constructed (i.e. the placeholders have been replaced by values),
    it can be accessed via the field ffpara_object.topology.
    """

    def __init__(self, template_top, ff_para_names, ff_para_values,
                 opt_para_names, opt_para_values, work_dir=".",
                 immediate_apply=True, mode="gromacs_topology"):
        """Constructor (is usually not called by user,
        as FFParameters should be generated by a ParameterFactory)

        Args:
            template_top (str): Toplogy file containing placeholders
                    of the form ?_ffparaname_? or ?_ffparaname_value_?
            ff_para_names (:obj:`list` of :obj:`str`): A list of the names in the placeholders
            ff_para_values (:obj:`list`): A list of values that the placeholders should be replaced with
            opt_para_names (:obj:`list` of :obj:`str`): A list of the variables for the optimization
                    (can be the same as ff_para_names)
            opt_para_values (:obj:`list` of :obj:`float`) : A list of values for the optimization variables
            work_dir (str): The coffe working directory.
            immediate_apply (bool): (default: True) If True, the topology is created upon construction.
            mode (str): (default: "gromacs_topology") Mode for recursion into included force field files.
                    See coffe.core.placeholders module for details.
        """
        self.work_dir, self.coffe_dir, self.logger = coffedir.prepare_coffe_work_dir(work_dir)
        self._topology = None
        try:
            self.mode = mode
            assert mode in ("gromacs_topology", "charmm_stream")
            self.template_top = filesys.make_abspath(template_top, self.work_dir)
            self.ff_para_names = ff_para_names
            self.ff_para_values = ff_para_values
            assert len(self.ff_para_names) == len(self.ff_para_values)
            assert len(self.ff_para_names) > 0
            self.opt_para_names = opt_para_names
            self.opt_para_values = opt_para_values
            assert len(self.opt_para_names) == len(self.opt_para_values)
            assert len(self.opt_para_names) > 0
            if immediate_apply:
                self.apply2top()
        except Exception as e:
            self.logger.exception(e)
            raise e

    @property
    def topology(self):
        """The final topology file, where placeholders have been replaced by values.
        Raises: FFParameterError, if placeholders have not been replaced, yet.
        Return: Filename of topology file.
        """
        if self._topology is None:
            raise FFParameterError("GmxFFParameters.topology was accessed "
                                   "before placeholders were replaced.")
        return self._topology

    def apply2top(self):
        """Replace placeholders in template topology by values in ff_para_values.
        Final topology can be accessed via the .topology field.

        Returns: None
        """
        self._topology = placeholder.recursive_replace_with_defaults(
            self.template_top,
            self.work_dir,
            {k: v for k,v in zip(self.ff_para_names, self.ff_para_values)},
            self.mode
        )


class ParameterFactory(object):
    """
    This class converts a vector of optimization parameters into a set of force field parameters
    """

    def __init__(self, topology, ff_para_names, opt_para_names=None,
                 opt2ff=None, work_dir=".", mode="gromacs_topology"):
        """
        Constructor.

        Args:
            topology (str):  A toplogy file or force field directory
                    that contains placeholders in the form ?_OPTPARANAME_?
            ff_para_names (:obj:`list` of :obj:`str`): A list of placeholders
                    in the topology (without the ?_ and _? pre- and suffixes).
            opt_para_names (:obj:`list` of :obj:`str`): A list of names for the tunable parameters.
                    The function make_parameter_set translates
                    those optimization parameters into force field parameters.
            opt2ff (:obj:`function`): A function to convert opt_paras in ff_paras
                    (list of floats to list of floats; ordering and length must be
                    consistent with ff_para_names and opt_para_names)
            work_dir (str): Path of the coffe working directory for this object.
            mode (str): (default: "gromacs_topology") Mode for recursion into
                    included files. See documentation of the placeholders module.
        """
        self.work_dir, self.coffe_dir, self.logger = coffedir.prepare_coffe_work_dir(work_dir)
        self.mode = mode
        try:
            self.topology = filesys.make_abspath(topology, self.work_dir)
            self.ff_para_names = ff_para_names
            self.opt_para_names = opt_para_names
            self.opt2ff = opt2ff
            assert type(self.ff_para_names) is list, \
                "ParameterFactory: ff_para_names has to be a list of parameter names"
            assert type(self.opt_para_names) is list, \
                "ParameterFactory: opt_para_names has to be a list of parameter names"
            if opt_para_names is None:
                self.opt_para_names = self.ff_para_names
                self.opt2ff = lambda x: x
                if opt2ff is not None:
                    self.logger.warning("ParameterFactory: "
                                        "Forced opt2ff to identity, because "
                                        "opt_para_names were not defined.")
            # make sure object is callable
            assert hasattr(self.opt2ff, '__call__')
            self.check_parameters()
        except Exception as e:
            self.logger.exception(e)
            raise e

    def check_parameters(self):
        """
        Checks if opt_names, ff_names, topology, and make_parameter_set-function are consistent

        Raises: FFParameterError, if parameters do not match template topology or conversion between
                optimization parameters and ff parameters fails
        Returns: None
        """
        assert len(self.opt_para_names) != 0
        assert len(self.ff_para_names) != 0
        # check if the user-provided opt2ff works
        test_ff = None
        try:
            test = [0.0 for _ in range(len(self.opt_para_names))]
            test_ff = self.opt2ff(test)
        except:
            raise FFParameterError(
                "opt2ff failed the test of converting {} into "
                "a set of force field parameters".format(test))
        assert len(test_ff) == len(self.ff_para_names)
        placeholders = placeholder.recursive_get_placeholders(self.topology, mode=self.mode)
        # get placeholders from topology
        #     each topologyfile is a dict {"file":filename, "in_ff":bool, "has_para":bool}
        #     where first the boolean value indicates whether this file is part of a forcefield
        #     and the second boolean value
        for p in placeholders:
            if p not in self.ff_para_names:
                msg = ("You have not specified the parameter '{}' in your ff_para_names, "
                       "but I found it in the topology (or an included file).".format(p))
                self.logger.error(msg)
                raise FFParameterError(msg)
        for p in self.ff_para_names:
            if p not in placeholders:
                msg = ("You want to optimize the parameter '{}', "
                       "but I have not found a placeholder '?_{}_?' "
                       "or '?_{}_value_?' in the topology (or an included file).".format(p, p, p))
                self.logger.error(msg)
                raise FFParameterError(msg)

    def make_parameter_set(self, vector, directory, immediate_apply=True):
        """Creates an instance of GmxFFParameters and returns it.

        Args:
            vector: A vector of values for the optimization parameters.
            directory: Subdirectory that will be the work dir for the FFParameters object.
            immediate_apply: Specifies if the topology for the FFParameters
                    object should be created upon construction.

        Returns:

        """
        assert len(vector) == len(self.opt_para_names)
        para = FFParameters(template_top=self.topology, ff_para_names=self.ff_para_names,
                            opt_para_names=self.opt_para_names, ff_para_values=self.opt2ff(vector),
                            opt_para_values=vector,
                            work_dir=filesys.make_abspath(directory, self.work_dir, check_exists=False),
                            immediate_apply=immediate_apply
                            )
        return para
